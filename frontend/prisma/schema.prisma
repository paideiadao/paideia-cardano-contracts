// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dao {
  policyId      String   @id
  name          String
  governanceToken String
  threshold     Int
  minProposalTime Int
  maxProposalTime Int
  quorum        Int
  minGovProposalCreate Int
  whitelistedProposals Json
  whitelistedActions Json
  deploymentTx  String
  address       String
  network       String
  utxoTxHash    String
  utxoIndex     Int
  utxoAddress   String
  utxoValue     String   // Changed from Json to String (CBOR hex)
  utxoDatum     String?
  createdAt     DateTime @default(now())
 
  proposals     Proposal[]
  scripts       DeployedScript[]
 
  @@index([network])
  @@index([name])
  @@map("daos")
}

model DeployedScript {
  scriptHash    String   @id
  name          String?
  txHash        String
  outputIndex   Int
  network       String
  size          Int?
  parameters    Json?
  deployedAt    DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Foreign key to DAO
  daoPolicyId   String?
  dao           Dao?     @relation(fields: [daoPolicyId], references: [policyId])
  
  @@index([name])
  @@index([network])
  @@index([txHash, outputIndex])
  @@index([daoPolicyId])
  @@map("deployed_scripts")
}

model Proposal {
  id            String   @id
  daoId         String
  name          String
  description   String
  endTime       DateTime
  status        String   // Active, FailedThreshold, FailedQuorum, Passed
  winningOption Int?
  tally         Json     // vote counts array
  deploymentTx  String
  network       String
  createdAt     DateTime @default(now())
  
  dao           Dao      @relation(fields: [daoId], references: [policyId])
  
  @@index([daoId])
  @@index([status])
  @@index([endTime])
  @@map("proposals")
}

model UtxoCache {
  id          String   @id @default(cuid())
  cacheKey    String   @unique
  address     String
  utxos       Json     // Array of serialized UTXO data
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  @@index([cacheKey])
  @@index([expiresAt])
  @@index([address])
  @@map("utxo_cache")
}

model Transaction {
  txHash    String   @id
  slot      Int?     // Critical for chronological ordering
  timestamp DateTime? // For proposal timing logic
  mint      Json?    // Track minting/burning of DAO tokens
  rawData   Json     // Full Maestro data for complex analysis
  network   String
  createdAt DateTime @default(now())
  
  addresses Address[]
  
  @@index([slot])
  @@index([timestamp])
  @@index([network])
  @@map("transactions")
}

model Address {
  address     String   @id
  network     String
  lastFetched DateTime?
  
  transactions Transaction[]
  
  @@index([network])
  @@map("addresses")
}